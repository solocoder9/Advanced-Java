Establish JDBC Connection
-------------------------
- There are 6 steps to establish the connection between any Java application with
  the database using JDBC.
        Step-1> Load & Register Driver
        Step-2> Establish Connection 
        Step-3> Create Statement
        Step-4> Exicute SQL queries or SQL statements
        Step-5> Process the result(optional)
        Step-6> Close costly resourses / Close connection


Step-1> Load & Register Driver
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- In this step we need to load the driver and register it before using it in the 
  program.
- There are two ways to  load and register a JDBC driver.
        1> Using 'Class.forName()' method 
        2> Using 'DriverManager.registerDriver()' method

1> Using 'Class.forName()' method:
- This is most common approacho.
- Class.forName() method call the JDBC driver dynamically at runtime.
- It is a static method present in java.lang package.
- If the specified class name is not found it throws a 'ClassNotFoundException'.
- Example:
    Class.forName("com.mysql.cj.jdbc.driver);

2> Using 'DriverManager.registerDriver()' method:
- DriverManager is a java inbuilt class with a static member 'register'.
- Hence, we call the constructor or the Driver class at complile time.
- Example:
    DriverManager.registerDriver(new create.jdbc.driver.OracleDatabase)
                    or
    Driver d = new Driver();
    DriverManager.registerDriver(d);


Step-2> Establish Connection
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Use the 'getConnection()' method of the 'DriverManager' class to establish a  
  connection with the database.
- 'getConnection()' method returns an instance of the 'Connection' interface, which
  represents a session with the database.
- The 'Connection' interface allows to create and execute SQL statements, DriverManager
  transactions, and communicate with the database.
- There are three overloaded version of the 'getConnection()' method.
        1> getConnection(String url)
        2> getConnection(String url, properties info)
        3> getConnection(String url, String user, String password)
- The getConnection() method throws as 'SQLException' because it indicates taht there 
  was a problem accessing the database. This could be various reasons such as- invalid url,
  incorrect credentials, database server issues, network problems, configuration erros.
- Example:
    Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/dbname", "username", "password");


Step-3> Create Statement
~~~~~~~~~~~~~~~~~~~~~~~~
- Use 'createStatement()' method of 'Connection' interface to create a 'Statement' object.
- This 'Statement' object allows to send SQL queries to the database and retrive the result.
- Example:
    Statement statement = connection.createStatement();


Step-4> Execute queries
~~~~~~~~~~~~~~~~~~~~~~~
- Use the 'executeQuery()' or 'excuteUpdate()' methods of the 'Statement' object to execute 
  SQL queries against the database and retrive results.
- Example:
    // For SELECT queries
    ResultSet resultSet = statement.executeQuery("SELECT * FROM tablename");

    // For INSERT, UPDATE, DELETE queries
    int rowsAffected = statement.executeUpdate("UPDATE tablename SET column = value WHERE condition");


Step-5> Process the Result
~~~~~~~~~~~~~~~~~~~~~~~~~~
- Process the 'ResultSet' object to retrive the data form the executed query.
- Use 'ResultSet' methods like 'next()', 'getString()', 'getInt()', etc to iterate over the
  result set and access the retrieved data.
- Example: 
    ResultSet resultSet = statement.executeQuery("SELECT * FROM tablename");
    while (resultSet.next()) {
      String column1 = resultSet.getString("column1");
      int column2 = resultSet.getInt("column2");
      // Process retrieved data
    }


Step-6> Close Connection
~~~~~~~~~~~~~~~~~~~~~~~~
- After completing database operations, close the resources such as 'ResultSet', 'Statement', and  
  'Connection' objects.
- Use 'close()' method of 'Connection' interface to close the connection or close the resources.
- This releases database and system resources, preventing memory leads and efficent resource utilization.
- Example:
    // Close the ResultSet, Statement, and Connection
    resultSet.close();
    statement.close();
    connection.close();


